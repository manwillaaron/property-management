import React, { Component } from "react";
import io from "socket.io-client";
import "./SocketView.css";
import { connect } from "react-redux";
import { getChatroomMessages, getAllChatrooms, saveMessage } from "../../redux/socketReducer";
const socket = io.connect("http://localhost:4000");

class SocketView extends Component {
  constructor(props) {
    super(props);

    this.state = {
      connected: false,
      messages: [],
    //   users: [this.props.chatroom.admin_id, this.props.chatroom.admin_id_renter],
      name: this.props.admin.username,
      newMessage: ""
    };

    this.sendMessage = this.sendMessage.bind(this);
    // Listeners for the socket

    // listen for this login event from the server
    socket.on("login", data => {
      console.log("Login event: ", data);
    //   this.props.getChatroomMessages(this.props.match.params.admin_id)
      this.addChatMessage(data.message);
      this.setState({
        connected: true
      });
    });

    socket.on('new message from sever', data => {
        console.log(data);
      this.addChatMessage(data);
      this.setState({
        connected: true
      });
    });

    // socket.on("user joined", updatedUsers => {
    //   this.setState({
    //     users: updatedUsers
    //   });
    // });

    socket.on("user left", users => {
      this.setState({ users });
    });
  }

//   componentDidUpdate(pp){
//       if(pp.messages !== this.props.messages){
//           this.props.getAllChatrooms(this.props.match.params.admin_id)
//           this.props.getChatroomMessages(this.props.match.params.admin_id)
//       }
//   }



   componentDidMount() {
       console.log(this.props.match.params.admin_id);
  this.props.getChatroomMessages(this.props.match.params.admin_id)
  this.props.getAllChatrooms(this.propsadmin.admin_id)
//    this.setState({ messages: this.props.messages})

    console.log(this.state);
    let messagesInfo = this.props.messages
    console.log(this.props.messages);
    let messagesRedux = []
         messagesInfo.map(messObj =>  messagesRedux.push(messObj.messages_content)
        )
        this.setState({messages: messagesRedux})
    console.log(this.props);
  }

  addChatMessage(message) {
      console.log('hit add chat message' , message);
    this.setState({
      messages: [...this.state.messages, message]
    });
  }

 connect(roomid) {
    if (this.state.name) {
      // send a 'join' event to the server with your username
      socket.emit("needy", roomid);
      socket.emit('user joined', {
          user: this.state.name
      })
    }
    console.log(+this.props.match.params.admin_id);
  }

  /* Sending a new message to the socket server */
  sendMessage() {
      this.props.saveMessage(
          this.props.chatroom[0].admin_id,
          this.props.chatroom[0].admin_id_renter,
          this.state.newMessage,
          this.props.chatroom[0].chatroom_id
        )
    // This emit needs to match on the server side
    socket.emit("new message", {
      username: this.state.name,
      message: this.state.newMessage,
      chatroom: this.props.chatroom[0].chatroom_id
    });
    this.setState({
      newMessage: ""
    });
  }

  render() {
    //   if(!this.props.messages) this.props.getChatroomMessages(this.props.match.params.admin_id);
      console.log(this.props);
    const { connected,  users, name, newMessage } = this.state;
const {messages} = this.props
    const allMessages = messages.map((message, index) => {
      return (
        <div key={index} className="message">
          <h3>{message.admin_id_messages}</h3>
          <p>{message.message_content}</p>
        </div>
      );
    });

    // const allUsers = users.map((user, index) => (
    //   <div key={index} className="user">
    //     {user.admin_id}
    //   </div>
    // ));
    return (
      <div>
        <h1>Socket Connected:</h1>
        <h3>{"" + connected}</h3>
        {!connected ? (
          <>
            <input
              value={name}
              onChange={e => this.setState({ name: e.target.value })}
            />
            <button onClick={() => {this.connect(this.props.messages.chatroom_id)
            console.log('clicked', this.props);}}>Connect</button>
          </>
        ) : (
          <></>
        )}

        {!connected ? null : (
          <>
            <input
              value={newMessage}
              onChange={e => this.setState({ newMessage: e.target.value })}
            />
            <button onClick={this.sendMessage}>Send</button>
            <div className="socket-view-chat">
              <div className="messages">{allMessages}</div>
              {/* <div className="users">{allUsers}</div> */}
            </div>
          </>
        )}
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
      chatroom: state.socket.chatrooms,
    messages: state.socket.messages,
    admin: state.admin.admin
  };
}

export default connect(
  mapStateToProps,
  { getChatroomMessages, getAllChatrooms, saveMessage }
)(SocketView);
